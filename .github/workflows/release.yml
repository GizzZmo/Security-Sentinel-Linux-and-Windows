name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

jobs:

  # Build all artifacts for release
  build-release:
    name: Build Release Artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            artifact: windows
            build-type: cpp
          - os: ubuntu-latest
            artifact: web
            build-type: web
          - os: ubuntu-latest
            artifact: linux
            build-type: cpp
    
    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      
    # Web interface build (Ubuntu)
    - name: Setup Node.js (Web/Linux)
      if: matrix.build-type == 'web'
      uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a
      with:
        node-version: '20.19.0'
        cache: 'npm'
        
    - name: Build web interface
      if: matrix.build-type == 'web'
      run: |
        npm ci
        npm run build
        
    - name: Package web interface
      if: matrix.build-type == 'web'
      run: |
        # Create NPM package
        npm pack --pack-destination=packages/
        # Create web distribution archive
        cd dist
        tar -czf ../security-sentinel-web-${{ github.ref_name || inputs.version }}.tar.gz *
        cd ..
        
    # Linux C++ build
    - name: Build Linux application
      if: matrix.artifact == 'linux' && matrix.build-type == 'cpp'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake
        mkdir build
        cd build
        cmake ..
        make -j$(nproc)
        
    - name: Package Linux application
      if: matrix.artifact == 'linux' && matrix.build-type == 'cpp'
      run: |
        mkdir -p packages/linux-binary
        cp build/bin/SecuritySentinel packages/linux-binary/ || echo "Binary not found, continuing..."
        cp README.md LICENSE packages/linux-binary/
        echo "[gemini]" > packages/linux-binary/config.ini
        echo "api_key=YOUR_API_KEY_HERE" >> packages/linux-binary/config.ini
        cd packages
        tar -czf security-sentinel-linux-${{ github.ref_name || inputs.version }}.tar.gz linux-binary/
        
        # Create Debian package
        cd ..
        mkdir -p packages/debian/security-sentinel/DEBIAN
        mkdir -p packages/debian/security-sentinel/usr/bin
        mkdir -p packages/debian/security-sentinel/usr/share/security-sentinel
        mkdir -p packages/debian/security-sentinel/etc/security-sentinel
        
        cp build/bin/SecuritySentinel packages/debian/security-sentinel/usr/bin/ || echo "Binary not found for debian package"
        cp README.md LICENSE packages/debian/security-sentinel/usr/share/security-sentinel/
        echo "[gemini]" > packages/debian/security-sentinel/etc/security-sentinel/config.ini
        echo "api_key=YOUR_API_KEY_HERE" >> packages/debian/security-sentinel/etc/security-sentinel/config.ini
        
        VERSION=${{ github.ref_name || inputs.version }}
        VERSION=${VERSION#v}
        
        cat > packages/debian/security-sentinel/DEBIAN/control << EOF
        Package: security-sentinel
        Version: $VERSION
        Section: utils
        Priority: optional
        Architecture: amd64
        Depends: libc6 (>= 2.31), libstdc++6 (>= 10)
        Maintainer: GizzZmo <maintainer@example.com>
        Description: Security Sentinel - Advanced Security Monitoring
         Security Sentinel is a comprehensive security monitoring application
         with AI-powered threat analysis, real-time system monitoring,
         and automated threat response capabilities.
        Homepage: https://github.com/GizzZmo/Security-Sentinel
        EOF
        
        cd packages/debian
        dpkg-deb --build security-sentinel || echo "Debian package build failed, continuing..."
        mv security-sentinel.deb ../security-sentinel_${VERSION}_amd64.deb || echo "Debian package move failed"
        cd ../..
        rm -rf packages/debian
        
    # Windows C++ build
    - name: Setup MSVC (Windows)
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@6fb02220983dee41ce7ae257b6f4d8f9bf5ed4ce
      
    - name: Setup CMake (Windows)
      if: matrix.os == 'windows-latest'
      uses: lukka/get-cmake@628dd514bed37cb0a609e84a6186cbbaa2fc0140
      
    - name: Build Windows application
      if: matrix.os == 'windows-latest'
      run: |
        mkdir build
        cd build
        cmake .. -G "Visual Studio 17 2022" -A x64
        cmake --build . --config Release
        
    - name: Package Windows application
      if: matrix.os == 'windows-latest'
      run: |
        mkdir release-package
        Copy-Item -Path "build/bin/Release/*" -Destination "release-package/" -Recurse -ErrorAction SilentlyContinue
        Copy-Item -Path "README.md" -Destination "release-package/"
        Copy-Item -Path "LICENSE" -Destination "release-package/"
        echo "[gemini]" | Out-File -FilePath "release-package/config.ini" -Encoding ASCII
        echo "api_key=YOUR_API_KEY_HERE" | Out-File -FilePath "release-package/config.ini" -Append -Encoding ASCII
        Compress-Archive -Path "release-package/*" -DestinationPath "security-sentinel-windows-${{ github.ref_name || inputs.version }}.zip"
        
    # Create checksums for all packages
    - name: Create checksums
      if: matrix.os == 'ubuntu-latest'
      run: |
        if [ -d "packages" ]; then
          cd packages
          for file in *; do
            if [ -f "$file" ]; then
              sha256sum "$file" >> checksums-${{ matrix.artifact }}.sha256
            fi
          done
          cd ..
        fi
        if [ -f "security-sentinel-web-"*".tar.gz" ]; then
          sha256sum security-sentinel-web-*.tar.gz >> checksums-${{ matrix.artifact }}.sha256
        fi
        
    - name: Create checksums (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        if (Test-Path "security-sentinel-windows-*.zip") {
          Get-FileHash security-sentinel-windows-*.zip -Algorithm SHA256 | 
          ForEach-Object { "$($_.Hash.ToLower())  $($_.Path | Split-Path -Leaf)" } |
          Out-File -FilePath "checksums-windows.sha256" -Encoding ASCII
        }
        
    # Upload artifacts
    - name: Upload web artifact
      if: matrix.build-type == 'web'
      uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08
      with:
        name: web-release
        path: |
          packages/*.tgz
          security-sentinel-web-*.tar.gz
          checksums-web.sha256
        if-no-files-found: warn
        
    - name: Upload Linux artifact
      if: matrix.artifact == 'linux' && matrix.build-type == 'cpp'
      uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08
      with:
        name: linux-release
        path: |
          packages/security-sentinel-linux-*.tar.gz
          packages/security-sentinel_*_amd64.deb
          checksums-linux.sha256
        if-no-files-found: warn
        
    - name: Upload Windows artifact
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08
      with:
        name: windows-release
        path: |
          security-sentinel-windows-*.zip
          checksums-windows.sha256
        if-no-files-found: warn

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-release
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      
    - name: Download all artifacts
      uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16
      
    - name: Display structure
      run: find . -type f -name "*.tar.gz" -o -name "*.zip" -o -name "*.deb" -o -name "*.tgz" -o -name "*.sha256"
      
    - name: Consolidate checksums
      run: |
        echo "# Security Sentinel ${{ github.ref_name || inputs.version }} - File Checksums" > checksums.sha256
        echo "# Generated on $(date -u)" >> checksums.sha256
        echo "" >> checksums.sha256
        find . -name "checksums-*.sha256" -exec cat {} \; >> checksums.sha256
      
    - name: Create Release
      uses: softprops/action-gh-release@6da8fa9354ddfdc4aeace5fc48d7f679b5214090
      with:
        tag_name: ${{ github.ref_name || inputs.version }}
        name: Security Sentinel ${{ github.ref_name || inputs.version }}
        draft: false
        prerelease: false
        generate_release_notes: true
        files: |
          web-release/*.tar.gz
          web-release/*.tgz
          windows-release/*.zip
          linux-release/*.tar.gz
          linux-release/*.deb
          checksums.sha256
        body: |
          ## Security Sentinel for Windows 11 & Linux - Release ${{ github.ref_name || inputs.version }}
          
          ### 📦 Downloads
          
          **Windows Native Application:**
          - `security-sentinel-windows-${{ github.ref_name || inputs.version }}.zip` - Complete Windows application with C++ native backend
          
          **Linux Native Application:**
          - `security-sentinel-linux-${{ github.ref_name || inputs.version }}.tar.gz` - Linux binary package
          - `security-sentinel_*_amd64.deb` - Debian package for Ubuntu/Debian systems
          
          **Web Interface:**
          - `security-sentinel-web-${{ github.ref_name || inputs.version }}.tar.gz` - Web interface build files
          - `security-sentinel-web-interface-*.tgz` - NPM package for developers
          
          ### 🚀 Installation
          
          **Windows Application:**
          1. Download and extract the Windows zip file
          2. Edit `config.ini` and add your Gemini API key
          3. Run `SecuritySentinel.exe` as Administrator
          
          **Linux Application:**
          ```bash
          # Using .deb package (Ubuntu/Debian)
          sudo dpkg -i security-sentinel_*_amd64.deb
          sudo apt-get install -f  # Fix dependencies if needed
          
          # Using .tar.gz (any Linux)
          tar -xzf security-sentinel-linux-*.tar.gz
          cd linux-binary
          # Edit config.ini with your API key
          sudo ./SecuritySentinel
          ```
          
          **Web Interface:**
          ```bash
          # For end users
          tar -xzf security-sentinel-web-*.tar.gz
          # Serve files with any web server
          
          # For developers
          npm install @security-sentinel/web-interface
          ```
          
          ### 📋 System Requirements
          
          **Windows:**
          - Windows 11 (21H2 or later) or Windows 10 (1909 or later)
          - Administrator privileges (for native app)
          - .NET Framework 4.8+ (usually pre-installed)
          
          **Linux:**
          - Ubuntu 20.04+ / Debian 11+ / CentOS 8+ / Fedora 32+
          - glibc 2.31+ and libstdc++6
          - Root privileges for system monitoring
          
          **Both Platforms:**
          - Modern web browser (for web interface)
          - Internet connection (for AI features)
          - 2GB RAM minimum, 4GB recommended
          
          ### 🔐 File Integrity
          
          All release files include SHA-256 checksums in `checksums.sha256`. Verify file integrity:
          ```bash
          sha256sum -c checksums.sha256
          ```
          
          For detailed installation instructions, see [Installation Guide](https://github.com/GizzZmo/Security-Sentinel/wiki/Installation-Guide)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

