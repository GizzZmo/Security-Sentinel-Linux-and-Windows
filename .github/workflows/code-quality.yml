
name: Code Quality & Security


on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:

    # Run security scan weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

jobs:

  # Dependency vulnerability check
  dependency-check:
    name: Dependency Vulnerability Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      
    - name: Setup Node.js
      uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a
      with:
        node-version: '20.19.0'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate --json > audit-results.json || true
        cat audit-results.json
        
    - name: Check for high severity vulnerabilities
      run: |
        # Basic parsing without jq for compatibility
        HIGH_VULNS=$(grep -o '"high":[0-9]*' audit-results.json | sed 's/"high"://' || echo "0")
        CRITICAL_VULNS=$(grep -o '"critical":[0-9]*' audit-results.json | sed 's/"critical"://' || echo "0")
        echo "High severity vulnerabilities: $HIGH_VULNS"
        echo "Critical severity vulnerabilities: $CRITICAL_VULNS"
        if [ "$CRITICAL_VULNS" -gt 0 ]; then
          echo "❌ Critical vulnerabilities found!"
          exit 1
        elif [ "$HIGH_VULNS" -gt 5 ]; then
          echo "⚠️ Many high severity vulnerabilities found!"
          exit 1
        else
          echo "✅ Vulnerability check passed"
        fi
      continue-on-error: true

  # License compliance check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      
    - name: Setup Node.js
      uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a
      with:
        node-version: '20.19.0'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install license checker
      run: npm install -g license-checker
      
    - name: Check licenses
      run: |
        echo "Checking package licenses..."
        license-checker --summary || echo "License summary completed"
        license-checker --excludePrivatePackages --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;Unlicense;WTFPL' || echo "✅ License check completed (some licenses may need review)"
      continue-on-error: true

  # Code formatting and style
  code-style:
    name: Code Style Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      
    - name: Setup Node.js
      uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a
      with:
        node-version: '20.19.0'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check TypeScript formatting
      run: |
        # Check if prettier is configured
        if [ -f ".prettierrc" ] || [ -f ".prettierrc.json" ] || [ -f "prettier.config.js" ]; then
          npx prettier --check . || echo "Prettier not configured, skipping format check"
        else
          echo "Prettier configuration not found, skipping format check"
        fi
      continue-on-error: true
      
    - name: TypeScript strict check
      run: |
        npx tsc --noEmit --strict || echo "TypeScript strict mode check completed"
      continue-on-error: true

  # Documentation quality
  docs-quality:
    name: Documentation Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      
    - name: Install markdown linter
      run: |
        npm install -g markdownlint-cli
        
    - name: Lint markdown files
      run: |
        markdownlint README.md CONTRIBUTING.md CHANGELOG.md wiki/*.md || echo "Markdown linting completed with warnings"
      continue-on-error: true
      
    - name: Check for TODOs and FIXMEs
      run: |
        echo "Checking for TODOs and FIXMEs..."
        TODO_COUNT=$(grep -r "TODO\|FIXME\|HACK" --include="*.ts" --include="*.tsx" --include="*.cpp" --include="*.h" . | wc -l)
        echo "Found $TODO_COUNT TODO/FIXME/HACK comments"
        if [ "$TODO_COUNT" -gt 20 ]; then
          echo "⚠️ Consider addressing some TODOs before release"
        fi

  # Performance and size check
  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      
    - name: Setup Node.js
      uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a
      with:
        node-version: '20.19.0'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build and analyze bundle size
      run: |
        npm run build
        echo "Build output size:"
        du -sh dist/
        echo "Individual file sizes:"
        find dist/ -type f -exec ls -lh {} \; | awk '{print $5, $9}'
        
        # Check if bundle is too large
        TOTAL_SIZE=$(du -s dist/ | cut -f1)
        if [ "$TOTAL_SIZE" -gt 10240 ]; then  # 10MB in KB
          echo "⚠️ Bundle size is quite large: ${TOTAL_SIZE}KB"
        else
          echo "✅ Bundle size is reasonable: ${TOTAL_SIZE}KB"
        fi

